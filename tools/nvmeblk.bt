#!/usr/bin/bpftrace
// SPDX-License-Identifier: Apache-2.0
/*
 * Observability of the alignment of NVMe blocks sizes for write requests
 * operations.
 *
 * Copyright (c) 2023 Samsung Electronics Co., Ltd. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License")
 *
 * Author:
 * Daniel Gomez <da.gomez@samsung.com>
 */

/*
 * Copy of the struct nvme_ns from 'drivers/nvme/host/nvme.h'.
 */
#ifndef BPFTRACE_HAVE_BTF
#include <linux/blk-mq.h>
#include <linux/nvme.h>

struct nvme_ns {
	struct list_head list;

	struct nvme_ctrl *ctrl;
	struct request_queue *queue;
	struct gendisk *disk;
#ifdef CONFIG_NVME_MULTIPATH
	enum nvme_ana_state ana_state;
	u32 ana_grpid;
#endif
	struct list_head siblings;
	struct kref kref;
	struct nvme_ns_head *head;

	int lba_shift;
	// [...]
};
#endif /* BPFTRACE_HAVE_BTF */

BEGIN
{
	@sector_shift = 9;

	/* Generate power-of-2 alignment sizes from 4k - 512k (total 8) */
	$aux = 4096;
	$i = 0;
	while ($i < 8) {
		@alig_size[$i] = $aux;
		@lba_len[$i] = (uint32)$aux/4096;
		$i += 1;
		$aux = $aux << 1;
	}

	printf("\nTracing NVMe command size... Hit Ctrl-C to end.\n");
	printf("%-9s %-10s %-8s %-6s %-16s %-16s\n", "DISK", "LBA", "LEN", "OP", "COMM", "ALIGN");
}

kretfunc:nvme_core:nvme_setup_cmd
{
	/* we add an empty kretfuncs probe to load module BTF */
}

kprobe:nvme_setup_cmd
{
	$req = (struct request *)arg1;
	$disk = $req->q->disk->disk_name;

	$req_op = $req->cmd_flags & 0xff;
	/*
	 * Filter request operations that are not REQ_OP_WRITE (1). Other
	 * requests types can be found at enum req_op in
	 * 'include/linux/blk_types.h' header.
	 */
	if ($req_op != 1) {
		return;
	}

	$ns = (struct nvme_ns *)arg0;
	$lba = $req->__sector >> ($ns->lba_shift - @sector_shift);
	$block_len = $req->__data_len;

	/*
	 * Check for size and LBA alignment in all the range (4k - 512k) and
	 * account for it.
	 */
	$i = 0;
	$max_alig_size = 0;
	while ($i < 8) {
		@aligned[$i] = (uint32)(!($block_len % (uint32)@alig_size[$i])) && (!($lba % @lba_len[$i]));
		if (@aligned[$i]) {
			@aligned_op[@alig_size[$i]] = count();
			$max_alig_size = @alig_size[$i];
		} else {
			@naligned_op[@alig_size[$i]] = count();
		}
		$i += 1;
	}
	printf("%-9s %-10u %-8u %-6u %-16s %-16u\n", $disk, $lba, $block_len, $req_op, comm, $max_alig_size);

	@comm[comm] = count();
	@data_len = hist($block_len);
}

END
{
	printf("\n\n--------------------------------------------------------------------------------");
	printf("\nTracing completed. Summary:");

	printf("\n\nAligned operations:\n");
	print(@aligned_op);
	print(@naligned_op);

	printf("\nBlock size histogram:\n");
	print(@data_len);

	printf("\nList of processes:\n");
	print(@comm);
	printf("--------------------------------------------------------------------------------");

	clear(@alig_size);
	clear(@aligned);
	clear(@aligned_op);
	clear(@naligned_op);
	clear(@comm);
	clear(@data_len);
	delete(@data_len);
	clear(@lba_len);
	delete(@sector_shift);
}
